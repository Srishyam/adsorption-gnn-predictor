''' 
* Manually enter the deets regarding polarizability of each element on the periodic table by atomic no
* According to 2018 paper: https://doi.org/10.1080/00268976.2018.1535143 (table last updated on Nov 27, 2018)
* Input this as a dictionary json and pickle
'''
import json
import pickle
def data_polarizability():
	pol_dict = {
	'1' : 4.50,
	'2' : 1.38,
	'3' : 164.0,
	'4' : 37.7,
	'5' : 20.5,
	'6' : 11.3,
	'7' : 7.4,
	'8' : 5.3,
	'9' : 3.74,
	'10': 2.68,
	'11': 163.0,
	'12': 71.2,
	'13': 57.8,
	'14': 37.3,
	'15': 25.0,
	'16': 19.4,
	'17': 14.6,
	'18': 11.1,
	'19': 290.0,
	'20': 161.0,
	'21': 97.0,
	'22': 100.0,
	'23': 87.0,
	'24': 83.0,
	'25': 68.0,
	'26': 62.0,
	'27': 55.0,
	'28': 49.0,
	'29': 47.0,
	'30': 38.7,
	'31': 50.0,
	'32': 40.0,
	'33': 30.0,
	'34': 29.0,
	'35': 21.0,
	'36': 16.8,
	'37': 320.0,
	'38': 197.0,
	'39': 162.0,
	'40': 112.0,
	'41': 98.0,
	'42': 87.0,
	'43': 79.0,
	'44': 72.0,
	'45': 66.0,
	'46': 26.1,
	'47': 55.0,
	'48': 46.0,
	'49': 65.0,
	'50': 53.0,
	'51': 43.0,
	'52': 38.0,
	'53': 32.9,
	'54': 27.3,
	'55': 401.0,
	'56': 272.0,
	'57': 215.0,
	'58': 205.0,
	'59': 216.0,
	'60': 208.0,
	'61': 200.0,
	'62': 192.0,
	'63': 184.0,
	'64': 158.0,
	'65': 170.0,
	'66': 165.0,
	'67': 156.0,
	'68': 150.0,
	'69': 144.0,
	'70': 139.0,
	'71': 137.0,
	'72': 103.0,
	'73': 74.0,
	'74': 68.0,
	'75': 62.0,
	'76': 57.0,
	'77': 54.0,
	'78': 48.0,
	'79': 36.0,
	'80': 33.9,
	'81': 50.0,
	'82': 47.0,
	'83': 48.0,
	'84': 44.0,
	'85': 42.0,
	'86': 35.0,
	'87': 318.0,
	'88': 246.0,
	'89': 203.0,
	'90': 217.0,
	'91': 154.0,
	'92': 129.0,
	'93': 151.0,
	'94': 132.0,
	'95': 131.0,
	'96': 144.0,
	'97': 125.0,
	'98': 122.0,
	'99': 118.0,
	'100': 113.0,
	'101': 109.0,
	'102': 110.0,
	'103': 320.0,
	'104': 112.0,
	'105': 42.0,
	'106': 40.0,
	'107': 38.0,
	'108': 36.0,
	'109': 34.0,
	'110': 32.0,
	'111': 32.0,
	'112': 28.0,
	'113': 29.0,
	'114': 31.0,
	'115': 71.0,
	'117': 76.0,
	'118': 58.0,
	'200': 359.0}
	return pol_dict
data = data_polarizability()
with open('./atom_polarizability.json','w') as json_file:
	json.dump(data, json_file)

